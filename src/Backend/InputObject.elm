-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.InputObject exposing (..)

import Backend.Enum.TeamRole
import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs


buildAddTeamMembersInput :
    AddTeamMembersInputRequiredFields
    -> AddTeamMembersInput
buildAddTeamMembersInput required____ =
    { teamId = required____.teamId, userIds = required____.userIds }


type alias AddTeamMembersInputRequiredFields =
    { teamId : ScalarCodecs.Uuid
    , userIds : List ScalarCodecs.Uuid
    }


{-| Type for the AddTeamMembersInput input object.
-}
type alias AddTeamMembersInput =
    { teamId : ScalarCodecs.Uuid
    , userIds : List ScalarCodecs.Uuid
    }


{-| Encode a AddTeamMembersInput into a value that can be used as an argument.
-}
encodeAddTeamMembersInput : AddTeamMembersInput -> Value
encodeAddTeamMembersInput input____ =
    Encode.maybeObject
        [ ( "teamId", (ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) input____.teamId |> Just ), ( "userIds", ((ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) |> Encode.list) input____.userIds |> Just ) ]


buildAddTeamOwnersInput :
    AddTeamOwnersInputRequiredFields
    -> AddTeamOwnersInput
buildAddTeamOwnersInput required____ =
    { teamId = required____.teamId, userIds = required____.userIds }


type alias AddTeamOwnersInputRequiredFields =
    { teamId : ScalarCodecs.Uuid
    , userIds : List ScalarCodecs.Uuid
    }


{-| Type for the AddTeamOwnersInput input object.
-}
type alias AddTeamOwnersInput =
    { teamId : ScalarCodecs.Uuid
    , userIds : List ScalarCodecs.Uuid
    }


{-| Encode a AddTeamOwnersInput into a value that can be used as an argument.
-}
encodeAddTeamOwnersInput : AddTeamOwnersInput -> Value
encodeAddTeamOwnersInput input____ =
    Encode.maybeObject
        [ ( "teamId", (ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) input____.teamId |> Just ), ( "userIds", ((ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) |> Encode.list) input____.userIds |> Just ) ]


buildCreateTeamInput :
    CreateTeamInputRequiredFields
    -> (CreateTeamInputOptionalFields -> CreateTeamInputOptionalFields)
    -> CreateTeamInput
buildCreateTeamInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { purpose = Absent }
    in
    { slug = required____.slug, name = required____.name, purpose = optionals____.purpose }


type alias CreateTeamInputRequiredFields =
    { slug : ScalarCodecs.Slug
    , name : String
    }


type alias CreateTeamInputOptionalFields =
    { purpose : OptionalArgument String }


{-| Type for the CreateTeamInput input object.
-}
type alias CreateTeamInput =
    { slug : ScalarCodecs.Slug
    , name : String
    , purpose : OptionalArgument String
    }


{-| Encode a CreateTeamInput into a value that can be used as an argument.
-}
encodeCreateTeamInput : CreateTeamInput -> Value
encodeCreateTeamInput input____ =
    Encode.maybeObject
        [ ( "slug", (ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug) input____.slug |> Just ), ( "name", Encode.string input____.name |> Just ), ( "purpose", Encode.string |> Encode.optional input____.purpose ) ]


buildRemoveUsersFromTeamInput :
    RemoveUsersFromTeamInputRequiredFields
    -> RemoveUsersFromTeamInput
buildRemoveUsersFromTeamInput required____ =
    { userIds = required____.userIds, teamId = required____.teamId }


type alias RemoveUsersFromTeamInputRequiredFields =
    { userIds : List ScalarCodecs.Uuid
    , teamId : ScalarCodecs.Uuid
    }


{-| Type for the RemoveUsersFromTeamInput input object.
-}
type alias RemoveUsersFromTeamInput =
    { userIds : List ScalarCodecs.Uuid
    , teamId : ScalarCodecs.Uuid
    }


{-| Encode a RemoveUsersFromTeamInput into a value that can be used as an argument.
-}
encodeRemoveUsersFromTeamInput : RemoveUsersFromTeamInput -> Value
encodeRemoveUsersFromTeamInput input____ =
    Encode.maybeObject
        [ ( "userIds", ((ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) |> Encode.list) input____.userIds |> Just ), ( "teamId", (ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) input____.teamId |> Just ) ]


buildSetTeamMemberRoleInput :
    SetTeamMemberRoleInputRequiredFields
    -> SetTeamMemberRoleInput
buildSetTeamMemberRoleInput required____ =
    { teamId = required____.teamId, userId = required____.userId, role = required____.role }


type alias SetTeamMemberRoleInputRequiredFields =
    { teamId : ScalarCodecs.Uuid
    , userId : ScalarCodecs.Uuid
    , role : Backend.Enum.TeamRole.TeamRole
    }


{-| Type for the SetTeamMemberRoleInput input object.
-}
type alias SetTeamMemberRoleInput =
    { teamId : ScalarCodecs.Uuid
    , userId : ScalarCodecs.Uuid
    , role : Backend.Enum.TeamRole.TeamRole
    }


{-| Encode a SetTeamMemberRoleInput into a value that can be used as an argument.
-}
encodeSetTeamMemberRoleInput : SetTeamMemberRoleInput -> Value
encodeSetTeamMemberRoleInput input____ =
    Encode.maybeObject
        [ ( "teamId", (ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) input____.teamId |> Just ), ( "userId", (ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) input____.userId |> Just ), ( "role", Encode.enum Backend.Enum.TeamRole.toString input____.role |> Just ) ]


buildUpdateTeamInput :
    (UpdateTeamInputOptionalFields -> UpdateTeamInputOptionalFields)
    -> UpdateTeamInput
buildUpdateTeamInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, purpose = Absent }
    in
    { name = optionals____.name, purpose = optionals____.purpose }


type alias UpdateTeamInputOptionalFields =
    { name : OptionalArgument String
    , purpose : OptionalArgument String
    }


{-| Type for the UpdateTeamInput input object.
-}
type alias UpdateTeamInput =
    { name : OptionalArgument String
    , purpose : OptionalArgument String
    }


{-| Encode a UpdateTeamInput into a value that can be used as an argument.
-}
encodeUpdateTeamInput : UpdateTeamInput -> Value
encodeUpdateTeamInput input____ =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input____.name ), ( "purpose", Encode.string |> Encode.optional input____.purpose ) ]
