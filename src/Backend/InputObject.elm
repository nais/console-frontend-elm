-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.InputObject exposing (..)

import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.ScalarCodecs
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildCreateTeamInput :
    CreateTeamInputRequiredFields
    -> CreateTeamInput
buildCreateTeamInput required____ =
    { slug = required____.slug, purpose = required____.purpose, slackChannel = required____.slackChannel }


type alias CreateTeamInputRequiredFields =
    { slug : Backend.ScalarCodecs.Slug
    , purpose : String
    , slackChannel : String
    }


{-| Type for the CreateTeamInput input object.
-}
type alias CreateTeamInput =
    { slug : Backend.ScalarCodecs.Slug
    , purpose : String
    , slackChannel : String
    }


{-| Encode a CreateTeamInput into a value that can be used as an argument.
-}
encodeCreateTeamInput : CreateTeamInput -> Value
encodeCreateTeamInput input____ =
    Encode.maybeObject
        [ ( "slug", (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug) input____.slug |> Just ), ( "purpose", Encode.string input____.purpose |> Just ), ( "slackChannel", Encode.string input____.slackChannel |> Just ) ]


buildReconcilerConfigInput :
    ReconcilerConfigInputRequiredFields
    -> ReconcilerConfigInput
buildReconcilerConfigInput required____ =
    { key = required____.key, value = required____.value }


type alias ReconcilerConfigInputRequiredFields =
    { key : Backend.ScalarCodecs.ReconcilerConfigKey
    , value : String
    }


{-| Type for the ReconcilerConfigInput input object.
-}
type alias ReconcilerConfigInput =
    { key : Backend.ScalarCodecs.ReconcilerConfigKey
    , value : String
    }


{-| Encode a ReconcilerConfigInput into a value that can be used as an argument.
-}
encodeReconcilerConfigInput : ReconcilerConfigInput -> Value
encodeReconcilerConfigInput input____ =
    Encode.maybeObject
        [ ( "key", (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecReconcilerConfigKey) input____.key |> Just ), ( "value", Encode.string input____.value |> Just ) ]


buildSlackAlertsChannelInput :
    SlackAlertsChannelInputRequiredFields
    -> (SlackAlertsChannelInputOptionalFields -> SlackAlertsChannelInputOptionalFields)
    -> SlackAlertsChannelInput
buildSlackAlertsChannelInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { channelName = Absent }
    in
    { environment = required____.environment, channelName = optionals____.channelName }


type alias SlackAlertsChannelInputRequiredFields =
    { environment : String }


type alias SlackAlertsChannelInputOptionalFields =
    { channelName : OptionalArgument String }


{-| Type for the SlackAlertsChannelInput input object.
-}
type alias SlackAlertsChannelInput =
    { environment : String
    , channelName : OptionalArgument String
    }


{-| Encode a SlackAlertsChannelInput into a value that can be used as an argument.
-}
encodeSlackAlertsChannelInput : SlackAlertsChannelInput -> Value
encodeSlackAlertsChannelInput input____ =
    Encode.maybeObject
        [ ( "environment", Encode.string input____.environment |> Just ), ( "channelName", Encode.string |> Encode.optional input____.channelName ) ]


buildUpdateTeamInput :
    (UpdateTeamInputOptionalFields -> UpdateTeamInputOptionalFields)
    -> UpdateTeamInput
buildUpdateTeamInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { purpose = Absent, slackChannel = Absent, slackAlertsChannels = Absent }
    in
    { purpose = optionals____.purpose, slackChannel = optionals____.slackChannel, slackAlertsChannels = optionals____.slackAlertsChannels }


type alias UpdateTeamInputOptionalFields =
    { purpose : OptionalArgument String
    , slackChannel : OptionalArgument String
    , slackAlertsChannels : OptionalArgument (List SlackAlertsChannelInput)
    }


{-| Type for the UpdateTeamInput input object.
-}
type alias UpdateTeamInput =
    { purpose : OptionalArgument String
    , slackChannel : OptionalArgument String
    , slackAlertsChannels : OptionalArgument (List SlackAlertsChannelInput)
    }


{-| Encode a UpdateTeamInput into a value that can be used as an argument.
-}
encodeUpdateTeamInput : UpdateTeamInput -> Value
encodeUpdateTeamInput input____ =
    Encode.maybeObject
        [ ( "purpose", Encode.string |> Encode.optional input____.purpose ), ( "slackChannel", Encode.string |> Encode.optional input____.slackChannel ), ( "slackAlertsChannels", (encodeSlackAlertsChannelInput |> Encode.list) |> Encode.optional input____.slackAlertsChannels ) ]
