-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Enum.UserSyncRunStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| User sync run status.

  - InProgress - User sync run in progress.
  - Success - Successful user sync run.
  - Failure - Failed user sync run.

-}
type UserSyncRunStatus
    = InProgress
    | Success
    | Failure


list : List UserSyncRunStatus
list =
    [ InProgress, Success, Failure ]


decoder : Decoder UserSyncRunStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "IN_PROGRESS" ->
                        Decode.succeed InProgress

                    "SUCCESS" ->
                        Decode.succeed Success

                    "FAILURE" ->
                        Decode.succeed Failure

                    _ ->
                        Decode.fail ("Invalid UserSyncRunStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserSyncRunStatus -> String
toString enum____ =
    case enum____ of
        InProgress ->
            "IN_PROGRESS"

        Success ->
            "SUCCESS"

        Failure ->
            "FAILURE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserSyncRunStatus
fromString enumString____ =
    case enumString____ of
        "IN_PROGRESS" ->
            Just InProgress

        "SUCCESS" ->
            Just Success

        "FAILURE" ->
            Just Failure

        _ ->
            Nothing
