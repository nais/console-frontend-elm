-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Mutation exposing (..)

import Backend.InputObject
import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.ScalarCodecs
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateTeamRequiredArguments =
    { input : Backend.InputObject.CreateTeamInput }


{-| Create a new team

The user creating the team will be granted team ownership.

The new team will be returned on success.

  - input - Input for creation of the new team.

-}
createTeam :
    CreateTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
createTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "createTeam" [ Argument.required "input" requiredArgs____.input Backend.InputObject.encodeCreateTeamInput ] object____ Basics.identity


type alias UpdateTeamRequiredArguments =
    { teamId : Backend.ScalarCodecs.Uuid
    , input : Backend.InputObject.UpdateTeamInput
    }


{-| Update an existing team

This mutation can be used to update the team name and team purpose. It is not possible to update the team slug.

The updated team will be returned on success.

  - teamId - ID of the team to update.
  - input - Input for updating the team.

-}
updateTeam :
    UpdateTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
updateTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "updateTeam" [ Argument.required "teamId" requiredArgs____.teamId (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid), Argument.required "input" requiredArgs____.input Backend.InputObject.encodeUpdateTeamInput ] object____ Basics.identity


type alias RemoveUsersFromTeamRequiredArguments =
    { input : Backend.InputObject.RemoveUsersFromTeamInput }


{-| Remove one or more users from a team

The updated team will be returned on success.

  - input - Input for removing users from a team.

-}
removeUsersFromTeam :
    RemoveUsersFromTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
removeUsersFromTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "removeUsersFromTeam" [ Argument.required "input" requiredArgs____.input Backend.InputObject.encodeRemoveUsersFromTeamInput ] object____ Basics.identity


type alias SynchronizeTeamRequiredArguments =
    { teamId : Backend.ScalarCodecs.Uuid }


{-| Manually synchronize a team

This action will trigger a full synchronization of the team against the configured third party systems. The action
is asynchronous.

The team will be returned.

  - teamId - The ID of the team to synchronize.

-}
synchronizeTeam :
    SynchronizeTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.TeamSync
    -> SelectionSet decodesTo RootMutation
synchronizeTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "synchronizeTeam" [ Argument.required "teamId" requiredArgs____.teamId (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) ] object____ Basics.identity


type alias AddTeamMembersRequiredArguments =
    { input : Backend.InputObject.AddTeamMembersInput }


{-| Add users to a team as regular team members

If one or more users are already added to the team they will not be updated. If a user is already an owner of the
team the user will not lose ownership. Regular team members will get read-only access to the team.

The updated team will be returned on success.

  - input - Input for adding users to a team as members.

-}
addTeamMembers :
    AddTeamMembersRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
addTeamMembers requiredArgs____ object____ =
    Object.selectionForCompositeField "addTeamMembers" [ Argument.required "input" requiredArgs____.input Backend.InputObject.encodeAddTeamMembersInput ] object____ Basics.identity


type alias AddTeamOwnersRequiredArguments =
    { input : Backend.InputObject.AddTeamOwnersInput }


{-| Add users to a team as team owners

If one or more users are already added to the team, they will be granted ownership of the team. If one or more users
are already owners of the team, they will not be updated. Team owners will get read/write access to the team.

The updated team will be returned on success.

  - input - Input for adding users to a team as owners.

-}
addTeamOwners :
    AddTeamOwnersRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
addTeamOwners requiredArgs____ object____ =
    Object.selectionForCompositeField "addTeamOwners" [ Argument.required "input" requiredArgs____.input Backend.InputObject.encodeAddTeamOwnersInput ] object____ Basics.identity


type alias SetTeamMemberRoleRequiredArguments =
    { input : Backend.InputObject.SetTeamMemberRoleInput }


{-| Set the member role of a user in a team

The user must already exist in the team for this mutation to succeed.

The team will be returned on success.

  - input - Input for setting the team member role.

-}
setTeamMemberRole :
    SetTeamMemberRoleRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
setTeamMemberRole requiredArgs____ object____ =
    Object.selectionForCompositeField "setTeamMemberRole" [ Argument.required "input" requiredArgs____.input Backend.InputObject.encodeSetTeamMemberRoleInput ] object____ Basics.identity
