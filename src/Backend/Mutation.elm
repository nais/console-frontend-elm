-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Mutation exposing (..)

import Backend.Enum.TeamRole
import Backend.InputObject
import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.ScalarCodecs
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias SetGitHubTeamSlugRequiredArguments =
    { teamSlug : Backend.ScalarCodecs.Slug
    , gitHubTeamSlug : Backend.ScalarCodecs.Slug
    }


{-| Set the GitHub team slug for a Console team.

  - teamSlug - The slug for the Console team.
  - gitHubTeamSlug - The slug for the connected GitHub team.

-}
setGitHubTeamSlug :
    SetGitHubTeamSlugRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
setGitHubTeamSlug requiredArgs____ object____ =
    Object.selectionForCompositeField "setGitHubTeamSlug" [ Argument.required "teamSlug" requiredArgs____.teamSlug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "gitHubTeamSlug" requiredArgs____.gitHubTeamSlug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug) ] object____ Basics.identity


type alias SetGoogleWorkspaceGroupEmailRequiredArguments =
    { teamSlug : Backend.ScalarCodecs.Slug
    , googleWorkspaceGroupEmail : String
    }


{-| Set the Google Workspace group email for a Console team.

  - teamSlug - The slug for the Console team.
  - googleWorkspaceGroupEmail - The email for the connected Google workspace group.

-}
setGoogleWorkspaceGroupEmail :
    SetGoogleWorkspaceGroupEmailRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
setGoogleWorkspaceGroupEmail requiredArgs____ object____ =
    Object.selectionForCompositeField "setGoogleWorkspaceGroupEmail" [ Argument.required "teamSlug" requiredArgs____.teamSlug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "googleWorkspaceGroupEmail" requiredArgs____.googleWorkspaceGroupEmail Encode.string ] object____ Basics.identity


type alias SetAzureADGroupIdRequiredArguments =
    { teamSlug : Backend.ScalarCodecs.Slug
    , azureADGroupId : Backend.ScalarCodecs.Uuid
    }


{-| Set the Azure AD group ID for a Console team.

  - teamSlug - The slug for the Console team.
  - azureADGroupId - The UUID for the connected Azure AD group.

-}
setAzureADGroupId :
    SetAzureADGroupIdRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
setAzureADGroupId requiredArgs____ object____ =
    Object.selectionForCompositeField "setAzureADGroupId" [ Argument.required "teamSlug" requiredArgs____.teamSlug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "azureADGroupId" requiredArgs____.azureADGroupId (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) ] object____ Basics.identity


type alias SetGcpProjectIdRequiredArguments =
    { teamSlug : Backend.ScalarCodecs.Slug
    , gcpEnvironment : String
    , gcpProjectId : String
    }


{-| Set the GCP project ID for a Console team in a specific environment.

  - teamSlug - The slug for the Console team.
  - gcpEnvironment - The environment for the GCP project.
  - gcpProjectId - The project ID for the connected GCP project.

-}
setGcpProjectId :
    SetGcpProjectIdRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
setGcpProjectId requiredArgs____ object____ =
    Object.selectionForCompositeField "setGcpProjectId" [ Argument.required "teamSlug" requiredArgs____.teamSlug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "gcpEnvironment" requiredArgs____.gcpEnvironment Encode.string, Argument.required "gcpProjectId" requiredArgs____.gcpProjectId Encode.string ] object____ Basics.identity


type alias SetNaisNamespaceRequiredArguments =
    { teamSlug : Backend.ScalarCodecs.Slug
    , gcpEnvironment : String
    , naisNamespace : Backend.ScalarCodecs.Slug
    }


{-| Set the NAIS namespace for a Console team in a specific environment.

  - teamSlug - The slug for the Console team.
  - gcpEnvironment - The environment for the namespace.
  - naisNamespace - The namespace.

-}
setNaisNamespace :
    SetNaisNamespaceRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
setNaisNamespace requiredArgs____ object____ =
    Object.selectionForCompositeField "setNaisNamespace" [ Argument.required "teamSlug" requiredArgs____.teamSlug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "gcpEnvironment" requiredArgs____.gcpEnvironment Encode.string, Argument.required "naisNamespace" requiredArgs____.naisNamespace (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug) ] object____ Basics.identity


type alias EnableReconcilerRequiredArguments =
    { name : Backend.ScalarCodecs.ReconcilerName }


{-| Enable a reconciler

A reconciler must be fully configured before it can be enabled.

  - name - The name of the reconciler to enable.

-}
enableReconciler :
    EnableReconcilerRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Reconciler
    -> SelectionSet decodesTo RootMutation
enableReconciler requiredArgs____ object____ =
    Object.selectionForCompositeField "enableReconciler" [ Argument.required "name" requiredArgs____.name (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecReconcilerName) ] object____ Basics.identity


type alias DisableReconcilerRequiredArguments =
    { name : Backend.ScalarCodecs.ReconcilerName }


{-| Disable a reconciler

The reconciler configuration will be left intact.

  - name - The name of the reconciler to disable.

-}
disableReconciler :
    DisableReconcilerRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Reconciler
    -> SelectionSet decodesTo RootMutation
disableReconciler requiredArgs____ object____ =
    Object.selectionForCompositeField "disableReconciler" [ Argument.required "name" requiredArgs____.name (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecReconcilerName) ] object____ Basics.identity


type alias ConfigureReconcilerRequiredArguments =
    { name : Backend.ScalarCodecs.ReconcilerName
    , config : List Backend.InputObject.ReconcilerConfigInput
    }


{-| Configure a reconciler.

  - name - The name of the reconciler to configure.
  - config - List of reconciler config inputs.

-}
configureReconciler :
    ConfigureReconcilerRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Reconciler
    -> SelectionSet decodesTo RootMutation
configureReconciler requiredArgs____ object____ =
    Object.selectionForCompositeField "configureReconciler" [ Argument.required "name" requiredArgs____.name (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecReconcilerName), Argument.required "config" requiredArgs____.config (Backend.InputObject.encodeReconcilerConfigInput |> Encode.list) ] object____ Basics.identity


type alias ResetReconcilerRequiredArguments =
    { name : Backend.ScalarCodecs.ReconcilerName }


{-| Reset all reconciler configuration options to their initial state and disable the reconciler if it is currently enabled.

  - name - The name of the reconciler to reset.

-}
resetReconciler :
    ResetReconcilerRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Reconciler
    -> SelectionSet decodesTo RootMutation
resetReconciler requiredArgs____ object____ =
    Object.selectionForCompositeField "resetReconciler" [ Argument.required "name" requiredArgs____.name (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecReconcilerName) ] object____ Basics.identity


type alias AddReconcilerOptOutRequiredArguments =
    { teamSlug : Backend.ScalarCodecs.Slug
    , userId : Backend.ScalarCodecs.Uuid
    , reconciler : Backend.ScalarCodecs.ReconcilerName
    }


{-| Add opt-out of a reconciler for a team member.

  - teamSlug - The team slug.
  - userId - The user ID of the team member.
  - reconciler - The name of the reconciler to opt the team member out of.

-}
addReconcilerOptOut :
    AddReconcilerOptOutRequiredArguments
    -> SelectionSet decodesTo Backend.Object.TeamMember
    -> SelectionSet decodesTo RootMutation
addReconcilerOptOut requiredArgs____ object____ =
    Object.selectionForCompositeField "addReconcilerOptOut" [ Argument.required "teamSlug" requiredArgs____.teamSlug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "userId" requiredArgs____.userId (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid), Argument.required "reconciler" requiredArgs____.reconciler (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecReconcilerName) ] object____ Basics.identity


type alias RemoveReconcilerOptOutRequiredArguments =
    { teamSlug : Backend.ScalarCodecs.Slug
    , userId : Backend.ScalarCodecs.Uuid
    , reconciler : Backend.ScalarCodecs.ReconcilerName
    }


{-| Remove opt-out of a reconciler for a team member.

  - teamSlug - The team slug.
  - userId - The user ID of the team member.
  - reconciler - The name of the reconciler to clear the opt-out from.

-}
removeReconcilerOptOut :
    RemoveReconcilerOptOutRequiredArguments
    -> SelectionSet decodesTo Backend.Object.TeamMember
    -> SelectionSet decodesTo RootMutation
removeReconcilerOptOut requiredArgs____ object____ =
    Object.selectionForCompositeField "removeReconcilerOptOut" [ Argument.required "teamSlug" requiredArgs____.teamSlug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "userId" requiredArgs____.userId (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid), Argument.required "reconciler" requiredArgs____.reconciler (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecReconcilerName) ] object____ Basics.identity


type alias CreateTeamRequiredArguments =
    { input : Backend.InputObject.CreateTeamInput }


{-| Create a new team

The user creating the team will be granted team ownership, unless the user is a service account, in which case the
team will not get an initial owner. To add one or more owners to the team, refer to the `addTeamOwners` mutation.

The new team will be returned on success.

  - input - Input for creation of the new team.

-}
createTeam :
    CreateTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
createTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "createTeam" [ Argument.required "input" requiredArgs____.input Backend.InputObject.encodeCreateTeamInput ] object____ Basics.identity


type alias UpdateTeamRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug
    , input : Backend.InputObject.UpdateTeamInput
    }


{-| Update an existing team

This mutation can be used to update the team purpose. It is not possible to update the team slug.

The updated team will be returned on success.

  - slug - Slug of the team to update.
  - input - Input for updating the team.

-}
updateTeam :
    UpdateTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
updateTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "updateTeam" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "input" requiredArgs____.input Backend.InputObject.encodeUpdateTeamInput ] object____ Basics.identity


type alias RemoveUsersFromTeamRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug
    , userIds : List Backend.ScalarCodecs.Uuid
    }


{-| Remove one or more users from a team

The updated team will be returned on success.

  - slug - Team slug that users should be removed from.
  - userIds - List of user IDs that should be removed from the team.

-}
removeUsersFromTeam :
    RemoveUsersFromTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
removeUsersFromTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "removeUsersFromTeam" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "userIds" requiredArgs____.userIds ((Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) |> Encode.list) ] object____ Basics.identity


type alias RemoveUserFromTeamRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug
    , userId : Backend.ScalarCodecs.Uuid
    }


{-| Remove a user from a team

The updated team will be returned on success.

  - slug - Team slug that the user should be removed from.
  - userId - ID of the user that will be removed from the team.

-}
removeUserFromTeam :
    RemoveUserFromTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
removeUserFromTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "removeUserFromTeam" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "userId" requiredArgs____.userId (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) ] object____ Basics.identity


type alias SynchronizeTeamRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug }


{-| Manually synchronize a team

This action will trigger a full synchronization of the team against the configured third party systems. The action
is asynchronous.

The team will be returned.

  - slug - The slug of the team to synchronize.

-}
synchronizeTeam :
    SynchronizeTeamRequiredArguments
    -> SelectionSet decodesTo Backend.Object.TeamSync
    -> SelectionSet decodesTo RootMutation
synchronizeTeam requiredArgs____ object____ =
    Object.selectionForCompositeField "synchronizeTeam" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug) ] object____ Basics.identity


{-| Manually synchronize all teams

This action will trigger a full synchronization of all teams against the configured third party systems. The action
is asynchronous. The operation can take a while, depending on the amount of teams currently in Console.

-}
synchronizeAllTeams :
    SelectionSet decodesTo Backend.Object.TeamSync
    -> SelectionSet decodesTo RootMutation
synchronizeAllTeams object____ =
    Object.selectionForCompositeField "synchronizeAllTeams" [] object____ Basics.identity


type alias AddTeamMembersRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug
    , userIds : List Backend.ScalarCodecs.Uuid
    }


{-| Add users to a team as regular team members

If one or more users are already added to the team they will not be updated. If a user is already an owner of the
team the user will not lose ownership. Regular team members will get read-only access to the team.

The updated team will be returned on success.

  - slug - Slug of the team that should receive new members.
  - userIds - List of user IDs that should be added to the team as members.

-}
addTeamMembers :
    AddTeamMembersRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
addTeamMembers requiredArgs____ object____ =
    Object.selectionForCompositeField "addTeamMembers" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "userIds" requiredArgs____.userIds ((Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) |> Encode.list) ] object____ Basics.identity


type alias AddTeamOwnersRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug
    , userIds : List Backend.ScalarCodecs.Uuid
    }


{-| Add users to a team as team owners

If one or more users are already added to the team, they will be granted ownership of the team. If one or more users
are already owners of the team, they will not be updated. Team owners will get read/write access to the team.

The updated team will be returned on success.

  - slug - Slug of the team that should receive new owners.
  - userIds - List of user IDs that should be added to the team as owners.

-}
addTeamOwners :
    AddTeamOwnersRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
addTeamOwners requiredArgs____ object____ =
    Object.selectionForCompositeField "addTeamOwners" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "userIds" requiredArgs____.userIds ((Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) |> Encode.list) ] object____ Basics.identity


type alias AddTeamMemberRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug
    , member : Backend.InputObject.TeamMemberInput
    }


{-| Add a user to a team

If the user is already a member or an owner of the team, the mutation will fail.

The updated team will be returned on success.

  - slug - Slug of the team that should receive a new member.
  - member - The new team member.

-}
addTeamMember :
    AddTeamMemberRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
addTeamMember requiredArgs____ object____ =
    Object.selectionForCompositeField "addTeamMember" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "member" requiredArgs____.member Backend.InputObject.encodeTeamMemberInput ] object____ Basics.identity


type alias SetTeamMemberRoleRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug
    , userId : Backend.ScalarCodecs.Uuid
    , role : Backend.Enum.TeamRole.TeamRole
    }


{-| Set the member role of a user in a team

The user must already exist in the team for this mutation to succeed.

The team will be returned on success.

  - slug - The slug of the team.
  - userId - The ID of the user.
  - role - The team role to set.

-}
setTeamMemberRole :
    SetTeamMemberRoleRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Team
    -> SelectionSet decodesTo RootMutation
setTeamMemberRole requiredArgs____ object____ =
    Object.selectionForCompositeField "setTeamMemberRole" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug), Argument.required "userId" requiredArgs____.userId (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid), Argument.required "role" requiredArgs____.role (Encode.enum Backend.Enum.TeamRole.toString) ] object____ Basics.identity


type alias RequestTeamDeletionRequiredArguments =
    { slug : Backend.ScalarCodecs.Slug }


{-| Request a key that can be used to trigger a team deletion process

Deleting a team is a two step process. First an owner of the team (or an admin) must request a team deletion key, and
then a second owner of the team (or an admin) must confirm the deletion using the confirmTeamDeletion mutation.

Note: Service accounts are not allowed to request team delete keys.

  - slug - The slug of the team that the deletion key will be assigned to.

-}
requestTeamDeletion :
    RequestTeamDeletionRequiredArguments
    -> SelectionSet decodesTo Backend.Object.TeamDeleteKey
    -> SelectionSet decodesTo RootMutation
requestTeamDeletion requiredArgs____ object____ =
    Object.selectionForCompositeField "requestTeamDeletion" [ Argument.required "slug" requiredArgs____.slug (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecSlug) ] object____ Basics.identity


type alias ConfirmTeamDeletionRequiredArguments =
    { key : Backend.ScalarCodecs.Uuid }


{-| Confirm a team deletion

This will start the actual team deletion process, which will be done in an asynchronous manner. All external
entities controlled by Console will also be deleted.

WARNING: There is no going back after starting this process.

Note: Service accounts are not allowed to confirm a team deletion.

  - key - Deletion key, acquired using the requestTeamDeletion mutation.

-}
confirmTeamDeletion :
    ConfirmTeamDeletionRequiredArguments
    -> SelectionSet Backend.ScalarCodecs.Uuid RootMutation
confirmTeamDeletion requiredArgs____ =
    Object.selectionForField "ScalarCodecs.Uuid" "confirmTeamDeletion" [ Argument.required "key" requiredArgs____.key (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecUuid) ] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


{-| Trigger a user synchronization

This mutation will trigger a full user synchronization with the connected Google Workspace, and return a correlation
ID that can later be matched to the log entries. The user synchronization itself is asynchronous.

-}
synchronizeUsers : SelectionSet Backend.ScalarCodecs.Uuid RootMutation
synchronizeUsers =
    Object.selectionForField "ScalarCodecs.Uuid" "synchronizeUsers" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecUuid |> .decoder)
