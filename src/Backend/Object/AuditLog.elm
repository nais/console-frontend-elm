-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Object.AuditLog exposing (..)

import Backend.InputObject
import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.ScalarCodecs
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| ID of the log entry.
-}
id : SelectionSet Backend.ScalarCodecs.Uuid Backend.Object.AuditLog
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


{-| String representation of the action performed.
-}
action : SelectionSet Backend.ScalarCodecs.AuditAction Backend.Object.AuditLog
action =
    Object.selectionForField "ScalarCodecs.AuditAction" "action" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecAuditAction |> .decoder)


{-| The related system.
-}
systemName : SelectionSet Backend.ScalarCodecs.SystemName Backend.Object.AuditLog
systemName =
    Object.selectionForField "ScalarCodecs.SystemName" "systemName" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecSystemName |> .decoder)


{-| The related correlation ID.
-}
correlationID : SelectionSet Backend.ScalarCodecs.Uuid Backend.Object.AuditLog
correlationID =
    Object.selectionForField "ScalarCodecs.Uuid" "correlationID" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


{-| The identity of the actor who performed the action. When this field is empty it means that some backend process performed the action. The value, when present, is either the name of a service account, or the email address of a user.
-}
actor : SelectionSet (Maybe String) Backend.Object.AuditLog
actor =
    Object.selectionForField "(Maybe String)" "actor" [] (Decode.string |> Decode.nullable)


{-| The type of the audit log target.
-}
targetType : SelectionSet Backend.ScalarCodecs.AuditLogsTargetType Backend.Object.AuditLog
targetType =
    Object.selectionForField "ScalarCodecs.AuditLogsTargetType" "targetType" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecAuditLogsTargetType |> .decoder)


{-| The identifier of the target.
-}
targetIdentifier : SelectionSet String Backend.Object.AuditLog
targetIdentifier =
    Object.selectionForField "String" "targetIdentifier" [] Decode.string


{-| Log entry message.
-}
message : SelectionSet String Backend.Object.AuditLog
message =
    Object.selectionForField "String" "message" [] Decode.string


{-| Creation time of the log entry.
-}
createdAt : SelectionSet Backend.ScalarCodecs.Time Backend.Object.AuditLog
createdAt =
    Object.selectionForField "ScalarCodecs.Time" "createdAt" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecTime |> .decoder)
