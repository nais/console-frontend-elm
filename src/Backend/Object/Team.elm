-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Object.Team exposing (..)

import Backend.InputObject
import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.ScalarCodecs
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Unique slug of the team.
-}
slug : SelectionSet Backend.ScalarCodecs.Slug Backend.Object.Team
slug =
    Object.selectionForField "ScalarCodecs.Slug" "slug" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecSlug |> .decoder)


{-| Purpose of the team.
-}
purpose : SelectionSet String Backend.Object.Team
purpose =
    Object.selectionForField "String" "purpose" [] Decode.string


{-| Audit logs for this team.
-}
auditLogs :
    SelectionSet decodesTo Backend.Object.AuditLog
    -> SelectionSet (List decodesTo) Backend.Object.Team
auditLogs object____ =
    Object.selectionForCompositeField "auditLogs" [] object____ (Basics.identity >> Decode.list)


{-| Team members.
-}
members :
    SelectionSet decodesTo Backend.Object.TeamMember
    -> SelectionSet (List decodesTo) Backend.Object.Team
members object____ =
    Object.selectionForCompositeField "members" [] object____ (Basics.identity >> Decode.list)


{-| Possible issues related to synchronization of the team to configured external systems. If there are no entries the team can be considered fully synchronized.
-}
syncErrors :
    SelectionSet decodesTo Backend.Object.SyncError
    -> SelectionSet (List decodesTo) Backend.Object.Team
syncErrors object____ =
    Object.selectionForCompositeField "syncErrors" [] object____ (Basics.identity >> Decode.list)


{-| Timestamp of the last successful synchronization of the team.
-}
lastSuccessfulSync : SelectionSet (Maybe Backend.ScalarCodecs.Time) Backend.Object.Team
lastSuccessfulSync =
    Object.selectionForField "(Maybe ScalarCodecs.Time)" "lastSuccessfulSync" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecTime |> .decoder |> Decode.nullable)


{-| Current reconciler state for the team.
-}
reconcilerState :
    SelectionSet decodesTo Backend.Object.ReconcilerState
    -> SelectionSet decodesTo Backend.Object.Team
reconcilerState object____ =
    Object.selectionForCompositeField "reconcilerState" [] object____ Basics.identity


{-| Slack channel for the team.
-}
slackChannel : SelectionSet String Backend.Object.Team
slackChannel =
    Object.selectionForField "String" "slackChannel" [] Decode.string


{-| A list of Slack channels for NAIS alerts. If no channel is specified for a given environment, NAIS will fallback to the slackChannel value.
-}
slackAlertsChannels :
    SelectionSet decodesTo Backend.Object.SlackAlertsChannel
    -> SelectionSet (List decodesTo) Backend.Object.Team
slackAlertsChannels object____ =
    Object.selectionForCompositeField "slackAlertsChannels" [] object____ (Basics.identity >> Decode.list)


{-| A list of GitHub repositories for the team.
-}
gitHubRepositories :
    SelectionSet decodesTo Backend.Object.GitHubRepository
    -> SelectionSet (List decodesTo) Backend.Object.Team
gitHubRepositories object____ =
    Object.selectionForCompositeField "gitHubRepositories" [] object____ (Basics.identity >> Decode.list)
