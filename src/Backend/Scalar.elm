-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Scalar exposing (AuditAction(..), AuditLogsTargetType(..), Codecs, ComponentName(..), DeployKey(..), Id(..), ReconcilerConfigKey(..), ReconcilerName(..), RoleName(..), Slug(..), Time(..), Uuid(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type AuditAction
    = AuditAction String


type AuditLogsTargetType
    = AuditLogsTargetType String


type ComponentName
    = ComponentName String


type DeployKey
    = DeployKey String


type Id
    = Id String


type ReconcilerConfigKey
    = ReconcilerConfigKey String


type ReconcilerName
    = ReconcilerName String


type RoleName
    = RoleName String


type Slug
    = Slug String


type Time
    = Time String


type Uuid
    = Uuid String


defineCodecs :
    { codecAuditAction : Codec valueAuditAction
    , codecAuditLogsTargetType : Codec valueAuditLogsTargetType
    , codecComponentName : Codec valueComponentName
    , codecDeployKey : Codec valueDeployKey
    , codecId : Codec valueId
    , codecReconcilerConfigKey : Codec valueReconcilerConfigKey
    , codecReconcilerName : Codec valueReconcilerName
    , codecRoleName : Codec valueRoleName
    , codecSlug : Codec valueSlug
    , codecTime : Codec valueTime
    , codecUuid : Codec valueUuid
    }
    -> Codecs valueAuditAction valueAuditLogsTargetType valueComponentName valueDeployKey valueId valueReconcilerConfigKey valueReconcilerName valueRoleName valueSlug valueTime valueUuid
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueAuditAction valueAuditLogsTargetType valueComponentName valueDeployKey valueId valueReconcilerConfigKey valueReconcilerName valueRoleName valueSlug valueTime valueUuid
    ->
        { codecAuditAction : Codec valueAuditAction
        , codecAuditLogsTargetType : Codec valueAuditLogsTargetType
        , codecComponentName : Codec valueComponentName
        , codecDeployKey : Codec valueDeployKey
        , codecId : Codec valueId
        , codecReconcilerConfigKey : Codec valueReconcilerConfigKey
        , codecReconcilerName : Codec valueReconcilerName
        , codecRoleName : Codec valueRoleName
        , codecSlug : Codec valueSlug
        , codecTime : Codec valueTime
        , codecUuid : Codec valueUuid
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueAuditAction valueAuditLogsTargetType valueComponentName valueDeployKey valueId valueReconcilerConfigKey valueReconcilerName valueRoleName valueSlug valueTime valueUuid -> Codec getterValue)
    -> Codecs valueAuditAction valueAuditLogsTargetType valueComponentName valueDeployKey valueId valueReconcilerConfigKey valueReconcilerName valueRoleName valueSlug valueTime valueUuid
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueAuditAction valueAuditLogsTargetType valueComponentName valueDeployKey valueId valueReconcilerConfigKey valueReconcilerName valueRoleName valueSlug valueTime valueUuid
    = Codecs (RawCodecs valueAuditAction valueAuditLogsTargetType valueComponentName valueDeployKey valueId valueReconcilerConfigKey valueReconcilerName valueRoleName valueSlug valueTime valueUuid)


type alias RawCodecs valueAuditAction valueAuditLogsTargetType valueComponentName valueDeployKey valueId valueReconcilerConfigKey valueReconcilerName valueRoleName valueSlug valueTime valueUuid =
    { codecAuditAction : Codec valueAuditAction
    , codecAuditLogsTargetType : Codec valueAuditLogsTargetType
    , codecComponentName : Codec valueComponentName
    , codecDeployKey : Codec valueDeployKey
    , codecId : Codec valueId
    , codecReconcilerConfigKey : Codec valueReconcilerConfigKey
    , codecReconcilerName : Codec valueReconcilerName
    , codecRoleName : Codec valueRoleName
    , codecSlug : Codec valueSlug
    , codecTime : Codec valueTime
    , codecUuid : Codec valueUuid
    }


defaultCodecs : RawCodecs AuditAction AuditLogsTargetType ComponentName DeployKey Id ReconcilerConfigKey ReconcilerName RoleName Slug Time Uuid
defaultCodecs =
    { codecAuditAction =
        { encoder = \(AuditAction raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map AuditAction
        }
    , codecAuditLogsTargetType =
        { encoder = \(AuditLogsTargetType raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map AuditLogsTargetType
        }
    , codecComponentName =
        { encoder = \(ComponentName raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map ComponentName
        }
    , codecDeployKey =
        { encoder = \(DeployKey raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map DeployKey
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecReconcilerConfigKey =
        { encoder = \(ReconcilerConfigKey raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map ReconcilerConfigKey
        }
    , codecReconcilerName =
        { encoder = \(ReconcilerName raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map ReconcilerName
        }
    , codecRoleName =
        { encoder = \(RoleName raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map RoleName
        }
    , codecSlug =
        { encoder = \(Slug raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Slug
        }
    , codecTime =
        { encoder = \(Time raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Time
        }
    , codecUuid =
        { encoder = \(Uuid raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Uuid
        }
    }
